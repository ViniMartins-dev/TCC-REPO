const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const Usuario = require('../../models/Usuario');

const SECRET = process.env.JWT_SECRET;

const loginUsuario = async (email, senha) => {
    const usuario = await Usuario.findOne({ where: { email } });
    if (!usuario) {
        throw new Error('Usuário não encontrado.');
    }

    console.log('Senha digitada:', senha);
    console.log('Senha armazenada no banco:', usuario.senha);

    // Verifica se a senha armazenada está criptografada (hash bcrypt começa com $2b$)
    const isHash = usuario.senha.startsWith('$2b$');

    // Se não estiver hash, cria hash da senha atual e atualiza o banco
    if (!isHash) {
        console.log('Senha não está criptografada. Atualizando com hash bcrypt...');
        const hash = await bcrypt.hash(usuario.senha, 10);
        usuario.senha = hash;
        await usuario.save();  // Atualiza no banco
        console.log('Senha atualizada no banco com hash.');
    }

    // Agora compara a senha digitada (texto puro) com a hash no banco
    const senhaCorreta = await bcrypt.compare(senha, usuario.senha);
    console.log('Senha correta?', senhaCorreta);

    if (!senhaCorreta) {
        throw new Error('Senha incorreta.');
    }

    const payload = {
        id: usuario.id,
        nome: usuario.nome,
        sobrenome: usuario.sobrenome,
        nome_fantasia: usuario.nome_fantasia,
        email: usuario.email,
        tipo: usuario.tipo
    };

    const token = jwt.sign(payload, SECRET, { expiresIn: '1d' });

    return {
        token,
        payload
    };
};

module.exports = {
    loginUsuario,
};
